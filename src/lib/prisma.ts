// src/lib/prisma.ts - VERSION RAILWAY OPTIMIS√âE
import { PrismaClient } from '@prisma/client'

// ‚úÖ D√âCLARATION GLOBALE POUR LE SINGLETON
declare global {
  var __prisma: PrismaClient | undefined
}

// ‚úÖ CONFIGURATION PRISMA SP√âCIALE POUR RAILWAY
function createPrismaClient(): PrismaClient {
  const isProduction = process.env.NODE_ENV === 'production'
  
  return new PrismaClient({
    log: isProduction ? ['error'] : ['error', 'warn'],
    
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    },
    
    // ‚úÖ D√âSACTIVER COMPL√àTEMENT LES PREPARED STATEMENTS POUR RAILWAY
    errorFormat: 'minimal',
    
    // ‚úÖ OPTIONS RAILWAY SP√âCIFIQUES
    transactionOptions: {
      maxWait: 10000, // 10s max wait
      timeout: 20000, // 20s timeout
    }
  })
}

// ‚úÖ SINGLETON : Une seule instance partag√©e
const prisma = globalThis.__prisma ?? createPrismaClient()

// ‚úÖ EN D√âVELOPPEMENT, STOCKER L'INSTANCE GLOBALEMENT
if (process.env.NODE_ENV !== 'production') {
  globalThis.__prisma = prisma
}

// ‚úÖ FONCTION DE TEST SIMPLIFI√âE POUR RAILWAY - SANS PREPARED STATEMENTS
export async function testDatabaseConnection(): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üîß Test de connexion DB (Railway optimis√©)...');
    
    // ‚úÖ SOLUTION RAILWAY: Utiliser une requ√™te Prisma simple au lieu de $queryRawUnsafe
    const result = await prisma.shop.findMany({
      take: 1,
      select: { id: true }
    });
    
    console.log('‚úÖ Base de donn√©es: Connexion OK (Railway)');
    return { success: true };
    
  } catch (error: any) {
    console.error('‚ùå Base de donn√©es: Erreur connexion:', error.message);
    
    // ‚úÖ TENTATIVE DE RECONNEXION SIMPLE SANS RAW QUERIES
    try {
      await prisma.$disconnect();
      await new Promise(resolve => setTimeout(resolve, 2000));
      await prisma.$connect();
      
      // Test simple avec findMany au lieu de raw query
      await prisma.shop.findMany({ take: 1, select: { id: true } });
      
      console.log('‚úÖ Reconnexion base de donn√©es r√©ussie (Railway)');
      return { success: true };
      
    } catch (fallbackError: any) {
      console.error('‚ùå Reconnexion base de donn√©es √©chou√©e:', fallbackError.message);
      return { 
        success: false, 
        error: fallbackError.message || 'Erreur de connexion √† la base de donn√©es'
      };
    }
  }
}

// ‚úÖ FONCTION POUR FORCER LA RECONNEXION
export async function reconnectIfNeeded(): Promise<void> {
  try {
    await prisma.$disconnect()
    await new Promise(resolve => setTimeout(resolve, 1000))
    await prisma.$connect()
    console.log('üîÑ Prisma reconnect√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors de la reconnexion Prisma:', error)
    throw error
  }
}

// ‚úÖ FONCTION STATUS SIMPLIFI√âE POUR RAILWAY
export async function getConnectionStatus(): Promise<{
  connected: boolean
  latency?: number
  error?: string
}> {
  const startTime = Date.now()
  
  try {
    // ‚úÖ Utiliser findMany au lieu de $queryRawUnsafe pour √©viter les prepared statements
    await prisma.shop.findMany({ take: 1, select: { id: true } })
    const latency = Date.now() - startTime
    
    return {
      connected: true,
      latency
    }
  } catch (error: any) {
    return {
      connected: false,
      error: error.message
    }
  }
}

// ‚úÖ GESTION PROPRE DE LA FERMETURE POUR RAILWAY
async function gracefulDisconnect() {
  try {
    console.log('üîå Fermeture des connexions Prisma...')
    await prisma.$disconnect()
    console.log('‚úÖ Prisma d√©connect√© proprement')
  } catch (error) {
    console.error('‚ùå Erreur fermeture Prisma:', error)
  }
}

// ‚úÖ SIGNAL HANDLERS POUR RAILWAY
process.on('beforeExit', gracefulDisconnect)
process.on('SIGTERM', async () => {
  console.log('üì° SIGTERM re√ßu, fermeture Prisma...')
  await gracefulDisconnect()
})
process.on('SIGINT', async () => {
  console.log('‚ö° SIGINT re√ßu, fermeture Prisma...')
  await gracefulDisconnect()
})

// ‚úÖ HEALTH CHECK ULTRA-SIMPLE POUR RAILWAY
export async function simpleHealthCheck(): Promise<boolean> {
  try {
    // Juste v√©rifier que Prisma peut se connecter sans faire de requ√™te
    await prisma.$connect()
    return true
  } catch {
    return false
  }
}

// ‚úÖ EXPORT DE L'INSTANCE UNIQUE
export default prisma

// ‚úÖ EXPORT NOMM√â POUR COMPATIBILIT√â
export { prisma }

console.log('üîß Prisma singleton initialis√© (Railway optimis√©):', {
  env: process.env.NODE_ENV,
  hasDbUrl: !!process.env.DATABASE_URL,
  disablePreparedStatements: process.env.PRISMA_DISABLE_PREPARED_STATEMENTS
})