// src/routes/public.ts - INT√âGRATION GPT-4O-MINI COMPL√àTE - CORRIG√âE
import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { z } from 'zod';
import { PrismaClient } from '@prisma/client';
import OpenAI from 'openai';

let prisma: PrismaClient;

try {
  prisma = new PrismaClient({
    log: ['query', 'info', 'warn', 'error'],
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  });
} catch (error) {
  console.error('‚ùå ERREUR lors de l\'initialisation de Prisma:', error);
  throw error;
}

// ‚úÖ INITIALISATION OPENAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

interface ShopParamsType {
  shopId: string;
}

// ‚úÖ HELPER : V√©rifier si une string est un UUID valide
function isValidUUID(str: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
}

// ‚úÖ HELPER : G√©n√©rer une configuration de fallback pour les tests
function getFallbackShopConfig(shopId: string) {
  return {
    success: true,
    data: {
      shop: {
        id: shopId,
        name: 'Boutique de Test',
        widgetConfig: {
          theme: "modern",
          language: "fr", 
          position: "bottom-right",
          buttonText: "Parler au vendeur",
          primaryColor: "#E91E63"
        },
        agentConfig: {
          name: "Rose",
          avatar: "https://ui-avatars.com/api/?name=Rose&background=E91E63&color=fff",
          upsellEnabled: false,
          welcomeMessage: "Bonjour ! Je suis Rose, votre assistante d'achat. Comment puis-je vous aider aujourd'hui ?",
          fallbackMessage: "Je transmets votre question √† notre √©quipe, un conseiller vous recontactera bient√¥t.",
          collectPaymentMethod: true
        }
      },
      agent: {
        id: `agent-${shopId}`,
        name: "Rose",
        type: "general",
        personality: "friendly",
        description: "Assistante d'achat sp√©cialis√©e dans l'accompagnement des clients",
        welcomeMessage: "Bonjour ! Je suis Rose, votre assistante d'achat. Comment puis-je vous aider aujourd'hui ?",
        fallbackMessage: "Je transmets votre question √† notre √©quipe, un conseiller vous recontactera bient√¥t.",
        avatar: "https://ui-avatars.com/api/?name=Rose&background=E91E63&color=fff",
        config: {
          collectName: true,
          collectPhone: true,
          collectAddress: false,
          collectPayment: true,
          upsellEnabled: true
        }
      },
      knowledgeBase: {
        content: `## Informations Boutique
Notre boutique propose des produits de qualit√© pour renforcer les liens entre couples.

## Le Jeu Pour les Couples
Un jeu r√©volutionnaire avec plus de 200 questions et d√©fis pour mieux se conna√Ætre.
Prix: 14 000 FCFA
Contenu: 200+ cartes questions, Guide d'utilisation, Livret de conseils, Bo√Æte premium

## Politique de retour
Retour gratuit sous 30 jours, satisfait ou rembours√©.

## Livraison
Livraison gratuite d√®s 20 000 FCFA d'achat.`,
        documentsCount: 1,
        documents: [
          {
            id: 'doc-fallback-001',
            title: 'Informations produits et boutique',
            contentType: 'manual',
            tags: ['boutique', 'produits', 'jeu-couples']
          }
        ]
      }
    }
  };
}

// ‚úÖ NOUVELLE FONCTION : G√©n√©rer le prompt syst√®me pour l'agent
function buildAgentPrompt(agent: any, knowledgeBase: string, productInfo?: any) {
  const basePrompt = `Tu es ${agent.name}, un vendeur IA commercial ${agent.personality === 'friendly' ? 'amical et bienveillant' : 'professionnel'}.

R√îLE: Assistant d'achat sp√©cialis√© dans la conversion de visiteurs en clients.

PERSONNALIT√â: ${agent.personality}
- ${agent.personality === 'friendly' ? 'Chaleureux, empathique, √† l\'√©coute' : 'Professionnel, expert, efficace'}
- Toujours positif et orient√© solution
- Expert en techniques de vente consultative

OBJECTIFS PRINCIPAUX:
1. Accueillir chaleureusement les visiteurs
2. Identifier leurs besoins et motivations d'achat
3. R√©pondre √† leurs questions avec pr√©cision
4. Lever leurs objections et rassurer
5. Collecter leurs informations de commande
6. Proposer des ventes additionnelles pertinentes

DONN√âES PRODUIT ACTUEL:
${productInfo ? `
- Nom: ${productInfo.name || 'Produit non sp√©cifi√©'}
- Prix: ${productInfo.price ? productInfo.price + ' FCFA' : 'Prix non sp√©cifi√©'}
- URL: ${productInfo.url || 'Non sp√©cifi√©e'}
` : 'Aucune information produit fournie'}

BASE DE CONNAISSANCE:
${knowledgeBase}

INSTRUCTIONS DE CONVERSATION:
1. Commence toujours par un accueil chaleureux
2. Pose des questions pour comprendre les besoins
3. Utilise les informations de ta base de connaissance
4. Sois proactif pour collecter les commandes
5. Propose des upsells intelligents si pertinent
6. Reste toujours dans ton r√¥le de vendeur

COLLECTE DE COMMANDE:
Quand un client veut acheter, collecte dans l'ordre:
1. Confirmation du produit et quantit√©
2. Nom complet
3. Num√©ro de t√©l√©phone
4. Adresse de livraison (si n√©cessaire)
5. Mode de paiement pr√©f√©r√©

R√âPONSES:
- Maximum 150 mots par r√©ponse
- Ton conversationnel et naturel
- Utilise des √©mojis avec parcimonie
- Pose toujours une question pour relancer la conversation`;

  return basePrompt;
}

// ‚úÖ INTERFACE pour le r√©sultat OpenAI
interface OpenAIResult {
  success: boolean;
  message?: string;
  tokensUsed?: number;
  error?: string;
  fallbackMessage?: string;
}

// ‚úÖ NOUVELLE FONCTION : Appeler GPT-4o-mini - CORRIG√âE
async function callOpenAI(messages: any[], agentConfig: any, knowledgeBase: string, productInfo?: any): Promise<OpenAIResult> {
  try {
    const systemPrompt = buildAgentPrompt(agentConfig, knowledgeBase, productInfo);
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        ...messages
      ],
      max_tokens: 300,
      temperature: 0.7,
      presence_penalty: 0.3,
      frequency_penalty: 0.3
    });

    return {
      success: true,
      message: completion.choices[0]?.message?.content || "Je n'ai pas pu g√©n√©rer de r√©ponse.",
      tokensUsed: completion.usage?.total_tokens || 0
    };

  } catch (error: any) {
    console.error('‚ùå Erreur OpenAI:', error);
    
    if (error.code === 'insufficient_quota') {
      return {
        success: false,
        error: 'Quota OpenAI d√©pass√©',
        fallbackMessage: "Je transmets votre question √† notre √©quipe, un conseiller vous recontactera bient√¥t."
      };
    }
    
    return {
      success: false,
      error: error.message || 'Erreur IA',
      fallbackMessage: "D√©sol√©, je rencontre un probl√®me technique. Un conseiller vous recontactera bient√¥t."
    };
  }
}

export default async function publicRoutes(fastify: FastifyInstance) {
  
  // ‚úÖ ROUTE : R√©cup√©rer la configuration publique d'un shop et de son agent principal
  fastify.get<{ Params: ShopParamsType }>('/shops/:shopId/agent', async (request, reply) => {
    try {
      const { shopId } = request.params;
      fastify.log.info(`üîç R√©cup√©ration config publique pour shop: ${shopId}`);
      
      if (!isValidUUID(shopId)) {
        fastify.log.warn(`‚ö†Ô∏è ShopId non-UUID d√©tect√©: ${shopId}, utilisation configuration fallback`);
        return getFallbackShopConfig(shopId);
      }
      
      await prisma.$connect();
      
      const shop = await prisma.shop.findUnique({
        where: { id: shopId },
        select: {
          id: true,
          name: true,
          is_active: true,
          widget_config: true,
          agent_config: true
        }
      });

      if (!shop || !shop.is_active) {
        fastify.log.warn(`‚ö†Ô∏è Shop non trouv√© ou inactif: ${shopId}, utilisation configuration fallback`);
        await prisma.$disconnect();
        return getFallbackShopConfig(shopId);
      }

      const agent = await prisma.agent.findFirst({
        where: { 
          shopId: shopId,
          isActive: true
        },
        include: {
          knowledgeBase: {
            where: {
              knowledgeBase: {
                isActive: true
              }
            },
            include: {
              knowledgeBase: {
                select: {
                  id: true,
                  title: true,
                  content: true,
                  contentType: true,
                  tags: true
                }
              }
            }
          }
        },
        orderBy: { updatedAt: 'desc' }
      });

      await prisma.$disconnect();

      if (!agent) {
        return {
          success: true,
          data: {
            shop: {
              id: shop.id,
              name: shop.name,
              widgetConfig: shop.widget_config,
              agentConfig: shop.agent_config
            },
            agent: null,
            knowledgeBase: {
              content: "Configuration par d√©faut de la boutique.",
              documentsCount: 0,
              documents: []
            }
          }
        };
      }

      const knowledgeContent = agent.knowledgeBase
        .map(kb => `## ${kb.knowledgeBase.title}\n${kb.knowledgeBase.content}`)
        .join('\n\n---\n\n');

      return {
        success: true,
        data: {
          shop: {
            id: shop.id,
            name: shop.name,
            widgetConfig: shop.widget_config,
            agentConfig: shop.agent_config
          },
          agent: {
            id: agent.id,
            name: agent.name,
            type: agent.type,
            personality: agent.personality,
            description: agent.description,
            welcomeMessage: agent.welcomeMessage,
            fallbackMessage: agent.fallbackMessage,
            avatar: agent.avatar,
            config: agent.config
          },
          knowledgeBase: {
            content: knowledgeContent,
            documentsCount: agent.knowledgeBase.length,
            documents: agent.knowledgeBase.map(kb => ({
              id: kb.knowledgeBase.id,
              title: kb.knowledgeBase.title,
              contentType: kb.knowledgeBase.contentType,
              tags: kb.knowledgeBase.tags
            }))
          }
        }
      };

    } catch (error: any) {
      fastify.log.error('‚ùå Get public shop config error:', error);
      fastify.log.warn(`‚ö†Ô∏è Erreur API pour shop ${request.params.shopId}, utilisation configuration fallback`);
      return getFallbackShopConfig(request.params.shopId);
    }
  });

  // ‚úÖ ROUTE : Endpoint de chat public AVEC GPT-4O-MINI - CORRIG√â
  fastify.post<{ 
    Body: { 
      shopId: string; 
      message: string; 
      conversationId?: string;
      productInfo?: any;
      visitorId?: string;
    } 
  }>('/chat', async (request, reply) => {
    const startTime = Date.now();
    
    try {
      const { shopId, message, conversationId, productInfo, visitorId } = request.body;
      
      fastify.log.info(`üí¨ Nouveau message chat pour shop: ${shopId}`);
      
      // Mode test pour shops non-UUID
      if (!isValidUUID(shopId)) {
        fastify.log.info(`üí¨ Mode test d√©tect√© pour shop: ${shopId}`);
        
        const simulatedResponse = getSimulatedAIResponse(message, productInfo);
        
        return {
          success: true,
          data: {
            conversationId: conversationId || `test-conv-${Date.now()}`,
            message: simulatedResponse,
            agent: {
              name: "Rose",
              avatar: "https://ui-avatars.com/api/?name=Rose&background=E91E63&color=fff"
            },
            responseTime: Date.now() - startTime
          }
        };
      }
      
      await prisma.$connect();
      
      // R√©cup√©rer la configuration de l'agent
      const shopConfig = await prisma.shop.findUnique({
        where: { id: shopId },
        select: {
          id: true,
          name: true,
          is_active: true
        }
      });

      if (!shopConfig || !shopConfig.is_active) {
        await prisma.$disconnect();
        return reply.status(404).send({ error: 'Boutique non trouv√©e ou inactive' });
      }

      const agent = await prisma.agent.findFirst({
        where: { 
          shopId: shopId,
          isActive: true
        },
        include: {
          knowledgeBase: {
            where: {
              knowledgeBase: {
                isActive: true
              }
            },
            include: {
              knowledgeBase: true
            }
          }
        }
      });

      if (!agent) {
        await prisma.$disconnect();
        return reply.status(404).send({ error: 'Aucun agent actif trouv√© pour cette boutique' });
      }

      // Cr√©er ou r√©cup√©rer la conversation
      let conversation;
      if (conversationId) {
        conversation = await prisma.conversation.findUnique({
          where: { id: conversationId },
          include: {
            messages: {
              orderBy: { createdAt: 'asc' },
              take: 10 // Limiter l'historique pour l'IA
            }
          }
        });
      }

      if (!conversation) {
        conversation = await prisma.conversation.create({
          data: {
            shopId: shopId,
            agentId: agent.id,
            visitorId: visitorId || `visitor_${Date.now()}`,
            productId: productInfo?.id,
            productName: productInfo?.name,
            productPrice: productInfo?.price,
            productUrl: productInfo?.url,
            visitorIp: request.ip,
            visitorUserAgent: request.headers['user-agent']
          },
          include: {
            messages: true
          }
        });
      }

      // Sauvegarder le message utilisateur
      await prisma.message.create({
        data: {
          conversationId: conversation.id,
          role: 'user',
          content: message
        }
      });

      // Pr√©parer la base de connaissance
      const knowledgeContent = agent.knowledgeBase
        .map(kb => `## ${kb.knowledgeBase.title}\n${kb.knowledgeBase.content}`)
        .join('\n\n---\n\n');

      // Pr√©parer l'historique des messages pour l'IA
      const messageHistory = conversation.messages.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content
      }));

      // Ajouter le nouveau message
      messageHistory.push({ role: 'user', content: message });

      // ‚úÖ APPELER GPT-4O-MINI - CORRIG√â
      const aiResult = await callOpenAI(messageHistory, agent, knowledgeContent, productInfo);
      
      // ‚úÖ VARIABLES AVEC VALEURS PAR D√âFAUT
      let aiResponse: string = aiResult.fallbackMessage || agent.fallbackMessage || "Je transmets votre question √† notre √©quipe.";
      let tokensUsed: number = 0;

      if (aiResult.success && aiResult.message) {
        aiResponse = aiResult.message;
        tokensUsed = aiResult.tokensUsed || 0;
      } else {
        fastify.log.error('‚ùå Erreur IA:', aiResult.error);
      }

      // Sauvegarder la r√©ponse de l'IA
      await prisma.message.create({
        data: {
          conversationId: conversation.id,
          role: 'assistant',
          content: aiResponse,
          tokensUsed: tokensUsed,
          responseTimeMs: Date.now() - startTime,
          modelUsed: 'gpt-4o-mini'
        }
      });

      await prisma.$disconnect();

      return {
        success: true,
        data: {
          conversationId: conversation.id,
          message: aiResponse,
          agent: {
            name: agent.name,
            avatar: agent.avatar
          },
          responseTime: Date.now() - startTime,
          tokensUsed
        }
      };

    } catch (error: any) {
      fastify.log.error('‚ùå Chat error:', error);
      
      // Fallback en cas d'erreur
      const fallbackResponse = request.body.message.toLowerCase().includes('bonjour') || request.body.message.toLowerCase().includes('salut')
        ? "Bonjour ! Je suis Rose, votre assistante d'achat. Comment puis-je vous aider avec ce produit ?"
        : "Merci pour votre message ! Comment puis-je vous aider davantage ?";
      
      return {
        success: true,
        data: {
          conversationId: request.body.conversationId || `fallback-conv-${Date.now()}`,
          message: fallbackResponse,
          agent: {
            name: "Rose",
            avatar: "https://ui-avatars.com/api/?name=Rose&background=E91E63&color=fff"
          },
          responseTime: Date.now() - startTime
        }
      };
    }
  });
}

// ‚úÖ FONCTION pour simuler l'IA (fallback pour les tests)
function getSimulatedAIResponse(message: string, productInfo: any, agent?: any): string {
  const msg = message.toLowerCase();
  const agentName = agent?.name || "Rose";
  
  if (msg.includes('bonjour') || msg.includes('salut') || msg.includes('hello')) {
    return `Bonjour ! Je suis ${agentName}. Je vois que vous vous int√©ressez √† "${productInfo?.name || 'ce produit'}". Comment puis-je vous aider ?`;
  }
  
  if (msg.includes('prix') || msg.includes('co√ªt') || msg.includes('tarif')) {
    if (productInfo?.price) {
      return `Le prix de "${productInfo.name}" est de ${productInfo.price} FCFA. C'est un excellent rapport qualit√©-prix ! Voulez-vous que je vous aide √† passer commande ?`;
    }
    return "Je vais v√©rifier le prix pour vous. Un instant...";
  }
  
  if (msg.includes('acheter') || msg.includes('commander') || msg.includes('commande')) {
    return "Parfait ! Je vais vous aider √† finaliser votre commande. Pour commencer, puis-je avoir votre nom et pr√©nom ?";
  }
  
  if (msg.includes('info') || msg.includes('d√©tail') || msg.includes('caract√©ristique')) {
    return `"${productInfo?.name || 'Ce produit'}" est un excellent choix ! D'apr√®s nos informations, c'est l'un de nos produits les plus appr√©ci√©s. Avez-vous des questions sp√©cifiques ?`;
  }
  
  if (msg.includes('questions') || msg.includes('question')) {
    return "Bien s√ªr ! Je suis l√† pour r√©pondre √† toutes vos questions. Que souhaitez-vous savoir exactement sur ce produit ?";
  }
  
  if (msg.includes('savoir plus') || msg.includes('en savoir')) {
    return "Je serais ravi de vous en dire plus ! Ce produit a d'excellentes caract√©ristiques. Qu'est-ce qui vous int√©resse le plus : les fonctionnalit√©s, la qualit√©, ou autre chose ?";
  }
  
  return agent?.fallbackMessage || "Merci pour votre message ! Comment puis-je vous aider davantage avec ce produit ?";
}