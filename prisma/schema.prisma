generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String              @id @default(uuid()) @db.Uuid
  shopId            String              @map("shop_id") @db.Uuid
  name              String              @db.VarChar(500)
  description       String?
  shortDescription  String?             @map("short_description") @db.VarChar(255)
  price             Decimal             @db.Decimal(10, 2)
  compareAtPrice    Decimal?            @map("compare_at_price") @db.Decimal(10, 2)
  costPrice         Decimal?            @map("cost_price") @db.Decimal(10, 2)
  currency          String              @default("EUR") @db.VarChar(3)
  sku               String?             @db.VarChar(100)
  barcode           String?             @db.VarChar(100)
  inventoryQuantity Int?                @default(0) @map("inventory_quantity")
  trackInventory    Boolean             @default(false) @map("track_inventory")
  allowBackorder    Boolean             @default(false) @map("allow_backorder")
  category          String?             @db.VarChar(255)
  tags              String[]            @default([])
  productType       String?             @map("product_type") @db.VarChar(100)
  vendor            String?             @db.VarChar(255)
  images            Json                @default("[]")
  featuredImage     String?             @map("featured_image")
  seoTitle          String?             @map("seo_title") @db.VarChar(255)
  seoDescription    String?             @map("seo_description")
  handle            String?             @db.VarChar(255)
  features          String[]            @default([])
  specifications    Json?               @default("{}")
  weight            Decimal?            @db.Decimal(8, 3)
  dimensions        Json?               @default("{}")
  source            ProductSource       @default(manual)
  externalId        String?             @map("external_id") @db.VarChar(255)
  externalHandle    String?             @map("external_handle") @db.VarChar(255)
  lastSyncAt        DateTime?           @map("last_sync_at")
  syncData          Json?               @default("{}") @map("sync_data")
  isActive          Boolean             @default(true) @map("is_active")
  isVisible         Boolean             @default(true) @map("is_visible")
  availableForSale  Boolean             @default(true) @map("available_for_sale")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  publishedAt       DateTime?           @map("published_at")
  orderItems        OrderItem[]
  collections       ProductCollection[]
  variants          ProductVariant[]
  shop              Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, sku], map: "unique_shop_sku")
  @@unique([shopId, handle], map: "unique_shop_handle")
  @@index([shopId], map: "idx_products_shop_id")
  @@index([source], map: "idx_products_source")
  @@index([isActive], map: "idx_products_active")
  @@index([category], map: "idx_products_category")
  @@index([sku], map: "idx_products_sku")
  @@index([externalId], map: "idx_products_external_id")
  @@map("products")
}

model ProductVariant {
  id                String   @id @default(uuid()) @db.Uuid
  productId         String   @map("product_id") @db.Uuid
  title             String   @db.VarChar(255)
  price             Decimal  @db.Decimal(10, 2)
  compareAtPrice    Decimal? @map("compare_at_price") @db.Decimal(10, 2)
  sku               String?  @db.VarChar(100)
  barcode           String?  @db.VarChar(100)
  inventoryQuantity Int      @default(0) @map("inventory_quantity")
  weight            Decimal? @db.Decimal(8, 3)
  image             String?
  option1           String?  @db.VarChar(100)
  option2           String?  @db.VarChar(100)
  option3           String?  @db.VarChar(100)
  externalId        String?  @map("external_id") @db.VarChar(255)
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku], map: "unique_product_variant_sku")
  @@index([productId], map: "idx_variants_product_id")
  @@map("product_variants")
}

model ProductCollection {
  id          String   @id @default(uuid()) @db.Uuid
  shopId      String   @map("shop_id") @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  name        String   @db.VarChar(255)
  handle      String   @db.VarChar(255)
  description String?
  image       String?
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId], map: "idx_collections_shop_id")
  @@map("product_collections")
}

model OrderItem {
  id          String   @id @default(uuid()) @db.Uuid
  orderId     String   @map("order_id") @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  variantId   String?  @map("variant_id") @db.Uuid
  quantity    Int      @default(1)
  price       Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @map("total_price") @db.Decimal(10, 2)
  productName String   @map("product_name") @db.VarChar(500)
  productSku  String?  @map("product_sku") @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_items_order_id")
  @@index([productId], map: "idx_order_items_product_id")
  @@map("order_items")
}

model Shop {
  id                      String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String              @db.VarChar(255)
  email                   String              @unique @db.VarChar(255)
  domain                  String?             @db.VarChar(255)
  widget_config           Json?               @default("{\"theme\": \"modern\", \"language\": \"fr\", \"position\": \"bottom-right\", \"buttonText\": \"Parler au vendeur\", \"primaryColor\": \"#E91E63\"}")
  agent_config            Json?               @default("{\"name\": \"Rose\", \"avatar\": \"https://ui-avatars.com/api/?name=Rose&background=E91E63&color=fff\", \"upsellEnabled\": false, \"welcomeMessage\": \"Bonjour ! Je suis votre assistante d'achat. Comment puis-je vous aider ?\", \"fallbackMessage\": \"Je transmets votre question à notre équipe, un conseiller vous recontactera bientôt.\", \"collectPaymentMethod\": true}")
  subscription_plan       String?             @default("free") @db.VarChar(50)
  createdAt               DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?           @default(now()) @map("updated_at") @db.Timestamptz(6)
  is_active               Boolean?            @default(true)
  industry                String?
  platform                String?
  onboarding_completed    Boolean?            @default(false)
  onboarding_completed_at DateTime?           @db.Timestamptz(6)
  agents                  Agent[]
  analyticsEvents         AnalyticsEvent[]
  conversations           Conversation[]
  invoices                Invoice[]
  knowledgeBase           KnowledgeBase[]
  orders                  Order[]
  productCollections      ProductCollection[]
  products                Product[]
  subscriptions           Subscription[]
  upsellRules             UpsellRule[]

  @@map("shops")
}

model Agent {
  id                 String               @id @default(uuid()) @db.Uuid
  shopId             String               @map("shop_id") @db.Uuid
  name               String               @db.VarChar(255)
  type               AgentType            @default(general)
  personality        AgentPersonality     @default(professional)
  description        String?
  welcomeMessage     String?              @default("Bonjour ! Comment puis-je vous aider aujourd'hui ?") @map("welcome_message")
  fallbackMessage    String?              @default("Je transmets votre question à notre équipe, un conseiller vous recontactera bientôt.") @map("fallback_message")
  avatar             String?              @default("https://ui-avatars.com/api/?name=Agent&background=3B82F6&color=fff")
  isActive           Boolean              @default(true) @map("is_active")
  config             Json?                @default("{}")
  totalConversations Int                  @default(0) @map("total_conversations")
  totalConversions   Int                  @default(0) @map("total_conversions")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  title              String?
  knowledgeBase      AgentKnowledgeBase[]
  shop               Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  conversations      Conversation[]

  @@index([shopId], map: "idx_agents_shop_id")
  @@index([isActive], map: "idx_agents_active")
  @@index([type], map: "idx_agents_type")
  @@map("agents")
}

model AgentKnowledgeBase {
  id              String        @id @default(uuid()) @db.Uuid
  agentId         String        @map("agent_id") @db.Uuid
  knowledgeBaseId String        @map("knowledge_base_id") @db.Uuid
  isActive        Boolean       @default(true) @map("is_active")
  priority        Int           @default(0)
  createdAt       DateTime      @default(now()) @map("created_at")
  agent           Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@unique([agentId, knowledgeBaseId])
  @@index([agentId], map: "idx_agent_kb_agent")
  @@index([knowledgeBaseId], map: "idx_agent_kb_knowledge")
  @@map("agent_knowledge_base")
}

model KnowledgeBase {
  id          String               @id @default(uuid()) @db.Uuid
  shopId      String               @map("shop_id") @db.Uuid
  title       String?              @db.VarChar(500)
  content     String
  contentType String               @default("manual") @map("content_type") @db.VarChar(50)
  sourceFile  String?              @map("source_file") @db.VarChar(255)
  sourceUrl   String?              @map("source_url") @db.VarChar(500)
  metadata    Json?                @default("{}")
  tags        String[]
  isActive    Boolean              @default(true) @map("is_active")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  agents      AgentKnowledgeBase[]
  shop        Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId], map: "idx_knowledge_shop_id")
  @@map("knowledge_base")
}

model Conversation {
  id                  String    @id @default(uuid()) @db.Uuid
  shopId              String    @map("shop_id") @db.Uuid
  agentId             String?   @map("agent_id") @db.Uuid
  visitorId           String?   @map("visitor_id") @db.VarChar(100)
  visitorIp           String?   @map("visitor_ip") @db.Inet
  visitorUserAgent    String?   @map("visitor_user_agent")
  productId           String?   @map("product_id") @db.VarChar(100)
  productName         String?   @map("product_name") @db.VarChar(255)
  productUrl          String?   @map("product_url")
  productPrice        Decimal?  @map("product_price") @db.Decimal(10, 2)
  status              String    @default("active") @db.VarChar(50)
  language            String    @default("fr") @db.VarChar(10)
  customerData        Json      @default("{}") @map("customer_data")
  startedAt           DateTime  @default(now()) @map("started_at")
  lastActivity        DateTime  @default(now()) @map("last_activity")
  completedAt         DateTime? @map("completed_at")
  messageCount        Int       @default(0) @map("message_count")
  conversionCompleted Boolean   @default(false) @map("conversion_completed")
  agent               Agent?    @relation(fields: [agentId], references: [id])
  shop                Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  messages            Message[]
  orders              Order[]

  @@index([shopId], map: "idx_conversations_shop_id")
  @@index([agentId], map: "idx_conversations_agent_id")
  @@index([status], map: "idx_conversations_status")
  @@index([visitorId], map: "idx_conversations_visitor")
  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid()) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  role           String       @db.VarChar(20)
  content        String
  contentType    String       @default("text") @map("content_type") @db.VarChar(20)
  tokensUsed     Int?         @map("tokens_used")
  responseTimeMs Int?         @map("response_time_ms")
  modelUsed      String?      @map("model_used") @db.VarChar(50)
  actionTaken    String?      @map("action_taken") @db.VarChar(100)
  actionData     Json?        @map("action_data")
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId], map: "idx_messages_conversation")
  @@index([createdAt], map: "idx_messages_created")
  @@map("messages")
}

model Order {
  id              String       @id @default(uuid()) @db.Uuid
  shopId          String       @map("shop_id") @db.Uuid
  conversationId  String       @map("conversation_id") @db.Uuid
  customerName    String?      @map("customer_name") @db.VarChar(255)
  customerPhone   String?      @map("customer_phone") @db.VarChar(50)
  customerEmail   String?      @map("customer_email") @db.VarChar(255)
  customerAddress String?      @map("customer_address")
  productItems    Json         @map("product_items")
  totalAmount     Decimal?     @map("total_amount") @db.Decimal(10, 2)
  currency        String       @default("XOF") @db.VarChar(10)
  paymentMethod   String?      @map("payment_method") @db.VarChar(100)
  upsellItems     Json         @default("[]") @map("upsell_items")
  upsellAmount    Decimal      @default(0) @map("upsell_amount") @db.Decimal(10, 2)
  status          String       @default("pending") @db.VarChar(50)
  notes           String?
  exportedAt      DateTime?    @map("exported_at")
  externalOrderId String?      @map("external_order_id") @db.VarChar(255)
  webhookSentAt   DateTime?    @map("webhook_sent_at")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  items           OrderItem[]
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  shop            Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId], map: "idx_orders_shop_id")
  @@index([status], map: "idx_orders_status")
  @@map("orders")
}

model UpsellRule {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shopId                 String    @map("shop_id") @db.Uuid
  triggerProductId       String?   @map("trigger_product_id") @db.VarChar(100)
  triggerConditions      Json?     @map("trigger_conditions")
  recommendedProductId   String?   @map("recommended_product_id") @db.VarChar(100)
  recommendedProductName String?   @map("recommended_product_name") @db.VarChar(255)
  discountPercentage     Decimal?  @default(0) @map("discount_percentage") @db.Decimal(5, 2)
  recommendationText     String?   @map("recommendation_text")
  isActive               Boolean?  @default(true) @map("is_active")
  priority               Int?      @default(0)
  createdAt              DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  shop                   Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("upsell_rules")
}

model AnalyticsEvent {
  id             String   @id @default(uuid()) @db.Uuid
  shopId         String   @map("shop_id") @db.Uuid
  conversationId String?  @map("conversation_id") @db.Uuid
  eventType      String   @map("event_type") @db.VarChar(100)
  eventData      Json     @default("{}") @map("event_data")
  userAgent      String?  @map("user_agent")
  ipAddress      String?  @map("ip_address") @db.Inet
  referrer       String?
  pageUrl        String?  @map("page_url")
  createdAt      DateTime @default(now()) @map("created_at")
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "idx_analytics_created")
  @@index([shopId], map: "idx_analytics_shop_id")
  @@index([eventType], map: "idx_analytics_type")
  @@map("analytics_events")
}

model Subscription {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopId               String    @map("shop_id") @db.Uuid
  stripeCustomerId     String?   @map("stripe_customer_id")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id")
  stripePriceId        String?   @map("stripe_price_id")
  stripe_product_id    String?
  plan_name            String
  status               String
  currentPeriodStart   DateTime? @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd     DateTime? @map("current_period_end") @db.Timestamptz(6)
  trialStart           DateTime? @map("trial_start") @db.Timestamptz(6)
  trialEnd             DateTime? @map("trial_end") @db.Timestamptz(6)
  canceledAt           DateTime? @map("canceled_at") @db.Timestamptz(6)
  ended_at             DateTime? @db.Timestamptz(6)
  metadata             Json?     @default("{}")
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  shop                 Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invoice {
  id                    String    @id @default(uuid()) @db.Uuid
  shopId                String    @map("shop_id") @db.Uuid
  subscriptionId        String    @map("subscription_id") @db.Uuid
  stripeInvoiceId       String    @unique @map("stripe_invoice_id") @db.VarChar(255)
  stripePaymentIntentId String?   @map("stripe_payment_intent_id") @db.VarChar(255)
  amountPaid            Decimal   @map("amount_paid") @db.Decimal(10, 2)
  currency              String    @default("eur") @db.VarChar(10)
  status                String    @db.VarChar(50)
  invoicePdf            String?   @map("invoice_pdf")
  hostedInvoiceUrl      String?   @map("hosted_invoice_url")
  periodStart           DateTime  @map("period_start")
  periodEnd             DateTime  @map("period_end")
  dueDate               DateTime? @map("due_date")
  paidAt                DateTime? @map("paid_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  amountDue             Decimal   @map("amount_due") @db.Decimal(10, 2)
  shop                  Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String    @unique @db.VarChar(255)
  password_hash           String?   @db.VarChar(255)
  first_name              String?   @db.VarChar(100)
  last_name               String?   @db.VarChar(100)
  name                    String?   @db.VarChar(200)
  company                 String?   @db.VarChar(255)
  role                    String?   @default("user") @db.VarChar(50)
  email_verified          Boolean?  @default(false)
  newsletter              Boolean?  @default(false)
  job_title               String?   @db.VarChar(100)
  website                 String?   @db.VarChar(255)
  industry                String?   @db.VarChar(100)
  team_size               String?   @db.VarChar(50)
  platform                String?   @db.VarChar(50)
  monthly_visitors        String?   @db.VarChar(50)
  goals                   Json?
  onboarding_completed    Boolean?  @default(false)
  onboarding_completed_at DateTime? @db.Timestamptz(6)
  acquisition_source      String?   @db.VarChar(100)
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)
  last_login_at           DateTime? @db.Timestamptz(6)

  @@index([company], map: "idx_users_company")
  @@index([created_at], map: "idx_users_created_at")
  @@index([email], map: "idx_users_email")
  @@index([email_verified], map: "idx_users_email_verified")
  @@index([onboarding_completed], map: "idx_users_onboarding_completed")
  @@index([role], map: "idx_users_role")
}

enum AgentType {
  general
  product_specialist
  support
  upsell

  @@map("agent_type")
}

enum AgentPersonality {
  professional
  friendly
  expert
  casual

  @@map("agent_personality")
}

enum ProductSource {
  manual
  shopify
  woocommerce
  api

  @@map("product_source")
}
